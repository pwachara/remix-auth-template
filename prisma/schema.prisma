// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @default(cuid())
  hashedPassword       String
  emailAddress         String   @unique
  emailAddressVerified Boolean  @default(false)
  name                 String?
  role                 GlobalRole @default(CUSTOMER)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  membership           Membership[]          @relation(name: "organization")
  invitedUsers         Membership[]          @relation(name: "invitee")
  invitedByUsers       Membership[]          @relation(name: "inviter")
  AuthSession          AuthSession[]
  PasswordResetTokens  PasswordResetTokens[]
  TwoFactorAuthTokens  TwoFactorAuthTokens[]
  @@index([emailAddress])
}

model AuthSession {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent String
  ipAddress String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([id])
  @@index([userId])
}

model PasswordResetTokens {
  hashedToken String   @id
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenExpiry DateTime

  @@index([userId])
}

enum TwoFactorStrategy {
  AUTHENTICATOR
}

model TwoFactorAuthTokens {
  userId   String            @id
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  secret   String
  strategy TwoFactorStrategy
}

model Organization {
  id         String          @id @default(cuid())
  name       String       @unique
  tillNumber Int?
  membership Membership[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Membership {
  id             String @id @default(cuid())
  user           User?           @relation(name: "organization", fields: [userId], references: [id])
  userId         String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String
  role           MembershipRole @default(TENANT)
  // When the user joins, we will clear out the name and email and set the user.
  invitedName    String?
  invitedEmail   String?
  //To keep track of who invites who and who was invited by who.
  inviter         User          @relation(name: "inviter", fields: [inviterId], references: [id])
  inviterId       String
  invitee         User?         @relation(name: "invitee", fields: [inviteeId], references: [id])
  inviteeId       String          
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  @@unique([organizationId, invitedEmail])
}

enum GlobalRole {
  CUSTOMER
  SUPERADMIN
}

enum MembershipRole {
  ADMIN
  LANDLORDANDTENANT
  LANDLORD
  TENANT
}